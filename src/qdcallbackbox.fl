# data file for the Fltk User Interface Designer (fluid)
version 1.0400
header_name {.h}
code_name {.cxx}
decl {\#include <array>} {public global
}

decl {\#include <optional>} {public global
}

widget_class QD_CallbackBox {
  xywh {77 440 400 99} box UP_BOX resizable visible position_relative_rescale
} {
  decl {std::optional<std::array<int, 2>> m_lastDragLoc;} {private local
  }
  decl {const int m_menuBarW = 100;} {private local
  }
  decl {const int m_menuBarH = 25;} {private local
  }
  Fl_Menu_Bar m_menuBar {
    xywh {0 0 100 25} box NO_BOX
  } {
    Submenu {} {
      label View
      xywh {0 0 100 20}
    } {
      MenuItem {} {
        label {Room In}
        callback {size(w() * 1.05, h() * 1.05);
redraw();}
        xywh {0 0 100 20}
      }
      MenuItem {} {
        label {Room Out}
        callback {size(std::max<int>(400, w() * 0.95), std::max<int>(100, h() * 0.95));
redraw();}
        xywh {10 10 100 20}
      }
    }
  }
  Fl_Button m_close {
    callback {if(fl_choice_n("Delete the condition checker?", "Yes", nullptr, nullptr) == 0){
    Fl::delete_widget(this);
}}
    image {fluid-icons/free-windows-10-icons/SVG/Cancel.svg} xywh {375 0 25 25} align 208
    code0 {\#include <FL/fl_ask.H>}
    code1 {\#include "qdiconbutton.hpp"}
    class QD_IconButton
  }
  Fl_Button m_input {
    label {@>}
    xywh {0 45 25 25}
  }
  Fl_Pack m_outputs {
    xywh {375 25 25 75}
  } {
    Fl_Button {} {
      label {@>}
      xywh {375 45 25 25}
    }
  }
  Fl_Group m_centerBox {
    xywh {25 25 350 75} box UP_BOX resizable
  } {
    Fl_Text_Editor m_editor {
      xywh {25 25 350 75}
      code0 {m_editor->buffer(new Fl_Text_Buffer());}
    }
  }
  code {calculateLayout();} {}
  Function {resize(int newX, int newY, int newW, int newH)} {return_type void
  } {
    code {{
    // resize the whole box
    // check comments in calculateSize() for layout
    const int closeBtnW = m_menuBarH;
    const int closeBtnH = m_menuBarH;

    const int inBoxW = closeBtnW;
    const int inBoxH = closeBtnH;

    const int outBoxW = inBoxW;
    const int outBoxH = inBoxH;

    const int outBoxPackW = outBoxW;
    const int outBoxPackH = outBoxH * std::max<int>(1, m_outputs->children());

    newW = std::max<int>({newW, m_menuBarW + closeBtnW,    inBoxW + outBoxPackW});
    newH = std::max<int>({newH, m_menuBarH +    inBoxH, closeBtnH + outBoxPackH});

    x(newX);
    y(newY);
    w(newW);
    h(newH);

    m_menuBar->resize(newX, newY, m_menuBarW, m_menuBarH);
    m_close->resize(newX + newW - closeBtnW, newY, closeBtnW, closeBtnH);

    m_input->resize(newX, newY + m_menuBarH + (newH - m_menuBarH - inBoxH) / 2, inBoxW, inBoxH);
    m_outputs->resize(newX + newW - outBoxPackW, newY + closeBtnH + (newH - closeBtnH - outBoxPackH) / 2, outBoxPackW, outBoxPackH);

    for(int i = 0; i < m_outputs->children(); ++i){
        if(Fl_Button *btn = dynamic_cast<Fl_Button*>(m_outputs->child(i))){
            btn->resize(m_outputs->x(), m_outputs->y() + i * outBoxH, outBoxW, outBoxH);
        }
    }

    m_centerBox->resize(newX + inBoxW, newY + m_menuBarH, newW - inBoxW - outBoxPackW, newH - m_menuBarH);
}} {}
  }
  Function {redraw()} {return_type void
  } {
    code {{
    if(parent()){
        parent()->redraw();
    }
    else{
        Fl_Group::redraw();
    }
}} {}
  }
  Function {handle(int event)} {return_type int
  } {
    code {int result = Fl_Group::handle(event);
if(Fl::event_button() == FL_LEFT_MOUSE){
    switch(event){
        case FL_PUSH:
            {
                m_lastDragLoc = {Fl::event_x(), Fl::event_y()};
                result = 1;
                break;
            }
        case FL_DRAG:
            {
                if(m_lastDragLoc.has_value()){
                    const int ex = Fl::event_x();
                    const int ey = Fl::event_y();

                    const int xdiff = ex - m_lastDragLoc.value()[0];
                    const int ydiff = ey - m_lastDragLoc.value()[1];

                    position(x() + xdiff, y() + ydiff);
                    parent()->redraw();

                    m_lastDragLoc = {ex, ey};
                }
                else{
                    m_lastDragLoc = {Fl::event_x(), Fl::event_y()};
                }

                result = 1;
                break;
            }
        case FL_RELEASE:
            {
                m_lastDragLoc.reset();
                result = 1;
                break;
            }
        default:
            {
                break;
            }
    }
}
return result;} {}
  }
  Function {calculateLayout()} {return_type void
  } {
    code {{
    const auto [newW, newH] = calculateSize(m_centerBox->w(), m_centerBox->h());
    resize(x(), y(), newW, newH);
}} {}
  }
  Function {calculateSize(int centerBoxW, int centerBoxH)} {return_type {std::array<int, 2>}
  } {
    code {{
    // calculate layout, two parameters
    // 1. size of centerBox
    // 2. count of outbox
    //
    // +-------+-------------------------+-+
    // | menus |                         |x|
    // | +-----+-------------------------+-+
    // | |                               | |
    // | |                               +-+
    // +-+                               |>|
    // |>|                               |>|
    // +-+                               |>|
    // | |                               |>|
    // | |                               +-+
    // | |                               | |
    // +-+-------------------------------+-+

    centerBoxW = std::max<int>(0, centerBoxW);
    centerBoxH = std::max<int>(0, centerBoxH);

    const int closeBtnW = m_menuBarH;
    const int closeBtnH = m_menuBarH;

    const int inBoxW = closeBtnW;
    const int inBoxH = closeBtnH;

    const int outBoxW = inBoxW;
    const int outBoxH = inBoxH;

    const int outBoxPackW = outBoxW;
    const int outBoxPackH = outBoxH * std::max<int>(1, m_outputs->children());

    return
    {
        std::max<int>({m_menuBarW + closeBtnW, inBoxW + centerBoxW + outBoxPackW}),
        std::max<int>({m_menuBarH + inBoxH, m_menuBarH + centerBoxH, closeBtnH + outBoxPackH}),
    };
}} {}
  }
}
